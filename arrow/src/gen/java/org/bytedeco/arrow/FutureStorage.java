// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


// A Future<void> just stores a Status (always ok for now, but that could change
// if we implement cancellation).
@Name("arrow::FutureStorage<void>") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class FutureStorage extends FutureStorageBase {
    static { Loader.load(); }
    /** Default native constructor. */
    public FutureStorage() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FutureStorage(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FutureStorage(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public FutureStorage position(long position) {
        return (FutureStorage)super.position(position);
    }
    @Override public FutureStorage getPointer(long i) {
        return new FutureStorage(this).position(position + i);
    }

  @MemberGetter public static native @Cast("const bool") boolean HasValue();
  public static final boolean HasValue = HasValue();

  public native @ByVal Status status();

  public native void MarkFinished(@ByVal(nullValue = "arrow::Status::OK()") Status st);
  public native void MarkFinished();
}
